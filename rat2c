#!/usr/bin/env python3
"""
Description:
    rat2c converts one or multiple rational expressions (given as
    files) into a single C function, optimizing the evaluation of
    any polynomials inside via FORM as described in arXiv:1310.7007
    and arXiv:1707.06453, and merging common subexpressions. The
    resulting C code is printed to the standard output.

    The input files can contain arbitrary arithmentic expressions
    using operators `+`, `-`, `*`, `/`, and `^`, and function calls
    given as `name(expr1,expr2,...)` or `name[expr1,expr2,...]`.
    Variable and function names should match `[a-zA-Z_][a-zA-Z0-9_]*`.

    Each part of the expression enclosed into parentheses is
    optimized separately via FORM, so fewer parentheses is
    better.

    The power operation will be formatted as pow(x,n) in the
    output (with integer n greater than 1). Fractional numbers
    will become quo(num,den). The inverse operation will become
    inv(x). These three functions should be appropriately defined
    by the user in the source code, for example for the `double`
    type one could use

        #include <math.h> // for pow(x,n)
        #define inv(x) ((double)1/(double)(x))
        #define quo(a,b) ((double)(a)/(double)(b))

Usage:
    rat2c [-a names] [-f name] [-t type] [-F command] [-O level] [-W number] file ...

Options:
    -a names    use this list of variables as the function argument
    -f name     use this function name (default: function)
    -t type     use this type for variables (default: double)
    -F command  use this FORM executable (default: form)
    -O level    use this FORM optimization level (default: 4)
    -W number   set FORM's WorkSpace parameter to this (default: 50G)
"""

import getopt
import os
import re
import subprocess
import sys
import tempfile

def log(*msg):
    print("*", *msg, file=sys.stderr)

FORM = "form"
FORM_O_LEVEL = 4
FORM_WORKSPACE = "50G"
FUNCTION_NAME = "function"
FUNCTION_ARGS = None
VAR_TYPE = "double"

optv, argv = getopt.gnu_getopt(sys.argv[1:], "hF:O:W:a:f:t:")
for opt, val in optv:
    if opt == "-F": FORM = val
    if opt == "-O": FORM_O_LEVEL = val
    if opt == "-W": FORM_WORKSPACE = val
    if opt == "-a": FUNCTION_ARGS = [a for a in val.split(",") if a]
    if opt == "-f": FUNCTION_NAME = val
    if opt == "-t": VAR_TYPE = val
    if opt == "-h": print(__doc__.strip()); exit(0)

def sed(text, rx, template):
    return re.sub(rx, template, text, flags=re.M)

def poly2form(expressions, variables, functions):
    tmpdir = os.environ.get("TMP", os.environ.get("TMPDIR", "/tmp"))
    with tempfile.NamedTemporaryFile(mode="w", suffix=".frm", dir=tmpdir) as f:
        f.write(f"#:WorkSpace {FORM_WORKSPACE}\n")
        f.write(f"auto S tmp;\n")
        if variables: f.write(f"S {','.join(variables)};\n")
        if functions: f.write(f"CF {','.join(functions)};\n")
        for expr in expressions:
            f.write("local tmpEXPR = (\n")
            f.write(expr)
            f.write("\n);\n")
            f.write(f"format O{FORM_O_LEVEL};\n")
            f.write(".sort;\n")
            f.write("extraSymbols array tmpO;\n")
            f.write("format 255;\n")
            f.write("format rational;\n")
            f.write("format C;\n")
            f.write("#optimize tmpEXPR\n")
            f.write(f"#write <{f.name}.out> \"%O\"\n")
            f.write(f"#write <{f.name}.out> \"%e\", tmpEXPR\n")
            f.write(f"#write <{f.name}.out> \"_SPLIT_HERE_;\"\n")
        f.write(".end\n")
        f.flush()
        env = os.environ.copy()
        env.setdefault("FORMTMP", tmpdir)
        env.setdefault("FORMTMPSORT", tmpdir)
        subprocess.check_call([FORM, "-M", "-Z", "-q", f.name], stdout=sys.stderr, env=env)
        with open(f.name + ".out", "r") as fo:
            code = fo.read()
        os.unlink(f.name + ".out")
    code = sed(code, r"\\$|[ \t\n]", "")
    assert code[-1] == ";"
    code = sed(code, r"tmpO\[([0-9]*)\]", fr"tmpf\1")
    code = sed(code, r"[.]E[+]0([^0-9])", r"\1")
    code = sed(code, r"([0-9]+)[.]/([0-9]+)[.]", r"quo(\1,\2)")
    code = sed(code, r"\bpow\(([^,]*),-1\)", r"inv(\1)")
    code = sed(code, r"\bpow\(([^,]*),-([0-9]*)\)", r"inv(pow(\1,\2))")
    code = sed(code, r"\bpow\(([a-zA-Z_][a-zA-Z0-9_]*),2\)", r"\1*\1")
    code = sed(code, r"\bpow\(([a-zA-Z_][a-zA-Z0-9_]*),3\)", r"\1*\1*\1")
    code = sed(code, r"\bpow\(([a-zA-Z_][a-zA-Z0-9_]*),4\)", r"(\1*\1)*(\1*\1)")
    return code.split("_SPLIT_HERE_;")[:-1]

rx_simplearg = re.compile(r"[a-zA-Z0-9_*^]*")
rx_term = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*")
rx_fn = re.compile(r"[a-zA-Z_][a-zA-Z0-9_]*(?=[\(\[])")

def hash_expression(var2expr, expr2var, text):
    parts = []
    subparts = []
    lastpos = 0
    depth = 0
    for m in re.finditer(r"[()\[\],]", text):
        pos = m.start()
        c = text[pos]
        if c == "(" or c == "[":
            if depth == 0:
                subparts.append(text[lastpos:pos])
                lastpos = pos + 1
            depth += 1
        elif c == ")" or c == "]":
            depth -= 1
            if depth == 0:
                value = hash_expression(var2expr, expr2var, text[lastpos:pos])
                subparts.append(value)
                lastpos = pos + 1
        elif c == ",":
            if depth == 0:
                subparts.append(text[lastpos:pos])
                lastpos = pos + 1
                expr = "".join(subparts)
                if re.fullmatch(rx_simplearg, expr):
                    parts.append(expr)
                else:
                    if expr not in expr2var:
                        tmp = f"tmpbr{len(var2expr)}"
                        var2expr[tmp] = expr
                        expr2var[expr] = tmp
                        parts.append(tmp)
                    else:
                        parts.append(expr2var[expr])
                subparts = []
    subparts.append(text[lastpos:])
    expr = "".join(subparts)
    if re.fullmatch(rx_simplearg, expr):
        parts.append(expr)
    else:
        if expr not in expr2var:
            tmp = f"tmpbr{len(var2expr)}"
            var2expr[tmp] = expr
            expr2var[expr] = tmp
            parts.append(tmp)
        else:
            parts.append(expr2var[expr])
    return "(" + ",".join(parts) + ")"

def uncompact(code):
    old2new = {}
    uniqidx = 1
    for var, val in code:
        if not var.startswith("result"):
            m = re.fullmatch(rx_term, val)
            if m is not None:
                old2new[var] = old2new.get(val, val)
                continue
        val = re.sub(rx_term, lambda m: old2new.get(m.group(0), m.group(0)), val)
        if var in old2new:
            tmp = f"tmpu{uniqidx}"
            uniqidx += 1
            old2new[var] = tmp
            yield tmp, val
        else:
            old2new[var] = var
            yield var, val

def lifetime(rcode):
    ended = set()
    for var, val in rcode:
        for name in set(re.findall(rx_term, val)):
            if name not in ended:
                yield name, None
                ended.add(name)
        ended.discard(var)
        yield var, val

def compact(code):
    old2new = {}
    free = []
    uniqidx = 1
    for var, val in code:
        if val is None:
            if var in old2new:
                free.append(old2new[var])
                del old2new[var]
        else:
            assert var not in old2new
            val = re.sub(rx_term, lambda m: old2new.get(m.group(0), m.group(0)), val)
            if var.startswith("result"):
                yield var, val
            else:
                if not free:
                    tmp = f"tmp{uniqidx}"
                    uniqidx += 1
                else:
                    tmp = free.pop(0)
                old2new[var] = tmp
                yield tmp, val

def dedup(code):
    old2new = {}
    key2val = {}
    val2key = {}
    for key, val in code:
        if val is None:
            key = old2new.get(key, key)
            yield key, None
            continue
        val = re.sub(rx_term, lambda m: old2new.get(m.group(0), m.group(0)), val)
        if key.startswith("result"):
            yield key, val
        else:
            if val in val2key:
                old2new[key] = val2key[val]
            else:
                if key in old2new:
                    yield old2new[key], val
                    key2val[old2new[key]] = val
                    val2key[val] = old2new[key]
                else:
                    yield key, val
                    key2val[key] = val
                    val2key[val] = key

allvars = set()
allfuns = set()
allparts = {}
for idx, fname in enumerate(argv):
    log(f"loading {fname}")
    if fname == "-":
        expression = sys.stdin.read()
    else:
        with open(fname, "r") as f:
            expression = f.read()
    expression = re.sub(r"\s+", "", expression)
    functions = set(re.findall(rx_fn, expression))
    variables = set(re.findall(rx_term, expression)) - functions
    assert "result" not in variables
    assert all(not name.startswith("tmp") for name in variables)
    assert "result" not in functions
    assert all(not name.startswith("tmp") for name in functions)
    allvars.update(variables)
    allfuns.update(functions)
    if variables: log(f"variables: {' '.join(variables)}")
    if functions: log(f"functions: {' '.join(functions)}")
    value = hash_expression(allparts, {}, expression)
    allparts[f"result[{idx}]"] = allparts.pop(value.strip("()"))
log(f"will optimize {len(allparts)} expressions")
code = []
for key, text in zip(allparts.keys(), poly2form(allparts.values(), allvars, allfuns)):
    assert "/" not in text
    lines = text[:-1].split(";")
    lines[-1] = f"{key}={lines[-1]}"
    code.extend(line.split("=", 1) for line in lines)
code = uncompact(code)
code = dedup(code)
code = reversed(list(lifetime(reversed(list(code)))))
code = compact(code)
argvars = FUNCTION_ARGS if FUNCTION_ARGS is not None else sorted(list(allvars))
args = "".join(f",\n    const {VAR_TYPE} {var}" for var in argvars)
print("void")
print(f"{FUNCTION_NAME}(\n    {VAR_TYPE} *result{args})")
print("{")
defined = set()
for var, val in code:
    if var in defined or var.startswith("result"):
        print(f"    {var} = {val};")
    else:
        print(f"    {VAR_TYPE} {var} = {val};")
        defined.add(var)
print("}")
